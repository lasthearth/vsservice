syntax = "proto3";

package news.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";

// Represents news service
service NewsService {
  option (google.api.default_host) = "api.lasthearth.ru";

  rpc CreateNews(CreateNewsRequest) returns (News) {
    option (google.api.http) = {
      post: "/v1/news"
      body: "*"
    };
    option (google.api.method_signature) = "news";
  }

  rpc ListNews(ListNewsRequest) returns (ListNewsResponse) {
    option (google.api.http) = {get: "/v1/news"};
  }

  rpc DeleteNews(DeleteNewsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/news/{id}"
    };
    option (google.api.method_signature) = "id";
  }

  rpc GetNews(GetNewsRequest) returns (News) {
    option (google.api.http) = {
      get: "/v1/news/{id}"
    };
    option (google.api.method_signature) = "id";
  }
}

message News {
  string id = 1;
  string title = 2;
  string content = 3;
  string preview = 4;
  int64 view_count = 5;
}

message CreateNewsRequest {
  string title = 1;
  string content = 2;
  bytes preview = 3;
}

message ListNewsRequest {
  // The maximum number of news to return. The service may return fewer than
  // this value.
  // If unspecified, at most 15 news will be returned.
  // The maximum value is 50; values above 50 will be coerced to 50.
  int32 page_size = 2;

  // A page token, received from a previous `ListBooks` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListBooks` must match
  // the call that provided the page token.
  string page_token = 3;
}

message ListNewsResponse {
  repeated News news = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteNewsRequest {
  // The unique identifier of the news item to delete.
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetNewsRequest {
  // The unique identifier of the news item to retrieve.
  string id = 1 [(google.api.field_behavior) = REQUIRED];
}
