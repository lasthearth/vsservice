// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package repomapper

import (
	goverter "github.com/lasthearth/vsservice/internal/pkg/goverter"
	mongo "github.com/lasthearth/vsservice/internal/player/internal/dto/mongo"
	verification1 "github.com/lasthearth/vsservice/internal/player/internal/dto/mongo/verification"
	model "github.com/lasthearth/vsservice/internal/player/internal/model"
	stats "github.com/lasthearth/vsservice/internal/player/internal/model/stats"
	verification "github.com/lasthearth/vsservice/internal/player/internal/model/verification"
)

type MapperImpl struct{}

func (c *MapperImpl) FromAnswer(source verification.Answer) verification1.Answer {
	var verificationdtoAnswer verification1.Answer
	verificationdtoAnswer.Id = source.Id
	verificationdtoAnswer.Question = source.Question
	verificationdtoAnswer.Answer = source.Answer
	verificationdtoAnswer.CreatedAt = goverter.TimeToTime(source.CreatedAt)
	return verificationdtoAnswer
}
func (c *MapperImpl) FromPlayer(source model.Player) mongo.Player {
	var dtoPlayer mongo.Player
	dtoPlayer.UserId = source.UserId
	dtoPlayer.UserName = source.UserName
	dtoPlayer.UserGameName = source.UserGameName
	dtoPlayer.Verification = c.FromVerification(source.Verification)
	dtoPlayer.Stats = c.statsStatsToStatsStats(source.Stats)
	return dtoPlayer
}
func (c *MapperImpl) FromVerification(source verification.Verification) verification1.Verification {
	var verificationdtoVerification verification1.Verification
	verificationdtoVerification.UserId = source.UserId
	if source.Answers != nil {
		verificationdtoVerification.Answers = make([]verification1.Answer, len(source.Answers))
		for i := 0; i < len(source.Answers); i++ {
			verificationdtoVerification.Answers[i] = c.FromAnswer(source.Answers[i])
		}
	}
	verificationdtoVerification.Contacts = source.Contacts
	verificationdtoVerification.Status = string(source.Status)
	verificationdtoVerification.VerificationCode = source.VerificationCode
	verificationdtoVerification.RejectionReason = source.RejectionReason
	return verificationdtoVerification
}
func (c *MapperImpl) ToAnswer(source verification1.Answer) verification.Answer {
	var verificationAnswer verification.Answer
	verificationAnswer.Id = source.Id
	verificationAnswer.Question = source.Question
	verificationAnswer.Answer = source.Answer
	verificationAnswer.CreatedAt = goverter.TimeToTime(source.CreatedAt)
	return verificationAnswer
}
func (c *MapperImpl) ToPlayer(source mongo.Player) model.Player {
	var modelPlayer model.Player
	modelPlayer.Id = goverter.ObjectIdToString(source.Model.Id)
	modelPlayer.UserId = source.UserId
	modelPlayer.UserName = source.UserName
	modelPlayer.UserGameName = source.UserGameName
	modelPlayer.Verification = c.ToVerification(source.Verification)
	modelPlayer.Stats = c.statsStatsToStatsStats(source.Stats)
	modelPlayer.UpdatedAt = goverter.TimeToTime(source.Model.UpdatedAt)
	modelPlayer.CreatedAt = goverter.TimeToTime(source.Model.CreatedAt)
	return modelPlayer
}
func (c *MapperImpl) ToPlayers(source []mongo.Player) []model.Player {
	var modelPlayerList []model.Player
	if source != nil {
		modelPlayerList = make([]model.Player, len(source))
		for i := 0; i < len(source); i++ {
			modelPlayerList[i] = c.ToPlayer(source[i])
		}
	}
	return modelPlayerList
}
func (c *MapperImpl) ToVerification(source verification1.Verification) verification.Verification {
	var verificationVerification verification.Verification
	verificationVerification.Id = goverter.ObjectIdToString(source.Model.Id)
	verificationVerification.UserId = source.UserId
	if source.Answers != nil {
		verificationVerification.Answers = make([]verification.Answer, len(source.Answers))
		for i := 0; i < len(source.Answers); i++ {
			verificationVerification.Answers[i] = c.ToAnswer(source.Answers[i])
		}
	}
	verificationVerification.Contacts = source.Contacts
	verificationVerification.Status = verification.VerificationStatus(source.Status)
	verificationVerification.RejectionReason = source.RejectionReason
	verificationVerification.VerificationCode = source.VerificationCode
	verificationVerification.UpdatedAt = goverter.TimeToTime(source.Model.UpdatedAt)
	verificationVerification.CreatedAt = goverter.TimeToTime(source.Model.CreatedAt)
	return verificationVerification
}
func (c *MapperImpl) statsStatsToStatsStats(source stats.Stats) stats.Stats {
	var statsStats stats.Stats
	statsStats.Id = source.Id
	statsStats.Name = source.Name
	statsStats.DeathCount = source.DeathCount
	if source.Seeds != nil {
		statsStats.Seeds = make([]int, len(source.Seeds))
		for i := 0; i < len(source.Seeds); i++ {
			statsStats.Seeds[i] = source.Seeds[i]
		}
	}
	statsStats.HoursPlayed = source.HoursPlayed
	statsStats.LastOnline = goverter.TimeToTime(source.LastOnline)
	statsStats.PlayersKilled = source.PlayersKilled
	statsStats.CreatedAt = goverter.TimeToTime(source.CreatedAt)
	statsStats.UpdatedAt = goverter.TimeToTime(source.UpdatedAt)
	return statsStats
}
