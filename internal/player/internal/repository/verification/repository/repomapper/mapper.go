// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package repomapper

import (
	goverter "github.com/lasthearth/vsservice/internal/pkg/goverter"
	verification1 "github.com/lasthearth/vsservice/internal/player/internal/dto/mongo/verification"
	verification "github.com/lasthearth/vsservice/internal/player/internal/model/verification"
)

type MapperImpl struct{}

func (c *MapperImpl) FromAnswer(source verification.Answer) verification1.Answer {
	var verificationdtoAnswer verification1.Answer
	verificationdtoAnswer.Id = source.Id
	verificationdtoAnswer.Question = source.Question
	verificationdtoAnswer.Answer = source.Answer
	verificationdtoAnswer.CreatedAt = goverter.TimeToTime(source.CreatedAt)
	return verificationdtoAnswer
}
func (c *MapperImpl) FromAnswers(source []verification.Answer) []verification1.Answer {
	var verificationdtoAnswerList []verification1.Answer
	if source != nil {
		verificationdtoAnswerList = make([]verification1.Answer, len(source))
		for i := 0; i < len(source); i++ {
			verificationdtoAnswerList[i] = c.FromAnswer(source[i])
		}
	}
	return verificationdtoAnswerList
}
func (c *MapperImpl) FromVerification(source verification.Verification) verification1.Verification {
	var verificationdtoVerification verification1.Verification
	verificationdtoVerification.UserId = source.UserId
	verificationdtoVerification.UserName = source.UserName
	verificationdtoVerification.UserGameName = source.UserGameName
	verificationdtoVerification.Answers = c.FromAnswers(source.Answers)
	verificationdtoVerification.Contacts = source.Contacts
	verificationdtoVerification.Status = string(source.Status)
	verificationdtoVerification.VerificationCode = source.VerificationCode
	verificationdtoVerification.RejectionReason = source.RejectionReason
	return verificationdtoVerification
}
func (c *MapperImpl) ToAnswer(source verification1.Answer) verification.Answer {
	var verificationAnswer verification.Answer
	verificationAnswer.Id = source.Id
	verificationAnswer.Question = source.Question
	verificationAnswer.Answer = source.Answer
	verificationAnswer.CreatedAt = goverter.TimeToTime(source.CreatedAt)
	return verificationAnswer
}
func (c *MapperImpl) ToAnswers(source []verification1.Answer) []verification.Answer {
	var verificationAnswerList []verification.Answer
	if source != nil {
		verificationAnswerList = make([]verification.Answer, len(source))
		for i := 0; i < len(source); i++ {
			verificationAnswerList[i] = c.ToAnswer(source[i])
		}
	}
	return verificationAnswerList
}
func (c *MapperImpl) ToVerification(source verification1.Verification) verification.Verification {
	var verificationVerification verification.Verification
	verificationVerification.Id = goverter.ObjectIdToString(source.Model.Id)
	verificationVerification.UserId = source.UserId
	verificationVerification.UserName = source.UserName
	verificationVerification.UserGameName = source.UserGameName
	verificationVerification.Answers = c.ToAnswers(source.Answers)
	verificationVerification.Contacts = source.Contacts
	verificationVerification.Status = verification.VerificationStatus(source.Status)
	verificationVerification.RejectionReason = source.RejectionReason
	verificationVerification.VerificationCode = source.VerificationCode
	verificationVerification.UpdatedAt = goverter.TimeToTime(source.Model.UpdatedAt)
	verificationVerification.CreatedAt = goverter.TimeToTime(source.Model.CreatedAt)
	return verificationVerification
}
func (c *MapperImpl) ToVerifications(source []verification1.Verification) []verification.Verification {
	var verificationVerificationList []verification.Verification
	if source != nil {
		verificationVerificationList = make([]verification.Verification, len(source))
		for i := 0; i < len(source); i++ {
			verificationVerificationList[i] = c.ToVerification(source[i])
		}
	}
	return verificationVerificationList
}
