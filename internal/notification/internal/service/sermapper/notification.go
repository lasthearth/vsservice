// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package sermapper

import (
	v1 "github.com/lasthearth/vsservice/gen/notification/v1"
	model "github.com/lasthearth/vsservice/internal/notification/model"
	service "github.com/lasthearth/vsservice/internal/notification/internal/service"
	goverter "github.com/lasthearth/vsservice/internal/pkg/goverter"
)

type NotificationMapperImpl struct{}

func (c *NotificationMapperImpl) ToProto(source model.Notification) *v1.Notification {
	var notificationv1Notification v1.Notification
	notificationv1Notification.Id = source.Id
	notificationv1Notification.UserId = source.UserId
	notificationv1Notification.Title = source.Title
	notificationv1Notification.Message = source.Message
	notificationv1Notification.State = service.StateToProto(source.State)
	notificationv1Notification.CreatedAt = goverter.TimeToTimestamp(source.CreatedAt)
	return &notificationv1Notification
}
func (c *NotificationMapperImpl) ToProtos(source []model.Notification) []*v1.Notification {
	var pNotificationv1NotificationList []*v1.Notification
	if source != nil {
		pNotificationv1NotificationList = make([]*v1.Notification, len(source))
		for i := 0; i < len(source); i++ {
			pNotificationv1NotificationList[i] = c.ToProto(source[i])
		}
	}
	return pNotificationv1NotificationList
}
