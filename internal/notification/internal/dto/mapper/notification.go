// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package mapper

import (
	dto "github.com/lasthearth/vsservice/internal/notification/internal/dto"
	model "github.com/lasthearth/vsservice/internal/notification/internal/model"
	goverter "github.com/lasthearth/vsservice/internal/pkg/goverter"
)

type NotificationMapperImpl struct{}

func (c *NotificationMapperImpl) FromModel(source *model.Notification) *dto.Notification {
	var pDtoNotification *dto.Notification
	if source != nil {
		var dtoNotification dto.Notification
		dtoNotification.UserID = (*source).UserID
		dtoNotification.Title = (*source).Title
		dtoNotification.Message = (*source).Message
		dtoNotification.State = string((*source).State)
		pDtoNotification = &dtoNotification
	}
	return pDtoNotification
}
func (c *NotificationMapperImpl) FromModels(source []*model.Notification) []*dto.Notification {
	var pDtoNotificationList []*dto.Notification
	if source != nil {
		pDtoNotificationList = make([]*dto.Notification, len(source))
		for i := 0; i < len(source); i++ {
			pDtoNotificationList[i] = c.FromModel(source[i])
		}
	}
	return pDtoNotificationList
}
func (c *NotificationMapperImpl) ToModel(source *dto.Notification) *model.Notification {
	var pModelNotification *model.Notification
	if source != nil {
		var modelNotification model.Notification
		modelNotification.ID = goverter.ObjectIdToString((*source).Model.ID)
		modelNotification.UserID = (*source).UserID
		modelNotification.Title = (*source).Title
		modelNotification.Message = (*source).Message
		modelNotification.State = model.NotificationState((*source).State)
		modelNotification.CreatedAt = goverter.TimeToTime((*source).Model.CreatedAt)
		modelNotification.UpdatedAt = goverter.TimeToTime((*source).Model.UpdatedAt)
		pModelNotification = &modelNotification
	}
	return pModelNotification
}
func (c *NotificationMapperImpl) ToModels(source []*dto.Notification) []*model.Notification {
	var pModelNotificationList []*model.Notification
	if source != nil {
		pModelNotificationList = make([]*model.Notification, len(source))
		for i := 0; i < len(source); i++ {
			pModelNotificationList[i] = c.ToModel(source[i])
		}
	}
	return pModelNotificationList
}
