// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package sermapper

import (
	v1 "github.com/lasthearth/vsservice/gen/settlement/v1"
	goverter "github.com/lasthearth/vsservice/internal/pkg/goverter"
	service "github.com/lasthearth/vsservice/internal/settlement/internal/service"
	model "github.com/lasthearth/vsservice/internal/settlement/model"
)

type MapperImpl struct{}

func (c *MapperImpl) ToAttachmentProto(source model.Attachment) *v1.Attachment {
	var settlementv1Attachment v1.Attachment
	settlementv1Attachment.Desc = source.Desc
	settlementv1Attachment.Url = source.Url
	return &settlementv1Attachment
}
func (c *MapperImpl) ToAttachmentsProto(source []model.Attachment) []*v1.Attachment {
	var pSettlementv1AttachmentList []*v1.Attachment
	if source != nil {
		pSettlementv1AttachmentList = make([]*v1.Attachment, len(source))
		for i := 0; i < len(source); i++ {
			pSettlementv1AttachmentList[i] = c.ToAttachmentProto(source[i])
		}
	}
	return pSettlementv1AttachmentList
}
func (c *MapperImpl) ToInvProto(source model.Invitation) *v1.GetInvitationsResponse_Invitation {
	var settlementv1GetInvitationsResponse_Invitation v1.GetInvitationsResponse_Invitation
	settlementv1GetInvitationsResponse_Invitation.Id = source.Id
	settlementv1GetInvitationsResponse_Invitation.UserId = source.UserId
	return &settlementv1GetInvitationsResponse_Invitation
}
func (c *MapperImpl) ToInvProtos(source []model.Invitation) []*v1.GetInvitationsResponse_Invitation {
	var pSettlementv1GetInvitationsResponse_InvitationList []*v1.GetInvitationsResponse_Invitation
	if source != nil {
		pSettlementv1GetInvitationsResponse_InvitationList = make([]*v1.GetInvitationsResponse_Invitation, len(source))
		for i := 0; i < len(source); i++ {
			pSettlementv1GetInvitationsResponse_InvitationList[i] = c.ToInvProto(source[i])
		}
	}
	return pSettlementv1GetInvitationsResponse_InvitationList
}
func (c *MapperImpl) ToMemberProto(source model.Member) *v1.Member {
	var settlementv1Member v1.Member
	settlementv1Member.UserId = source.UserId
	return &settlementv1Member
}
func (c *MapperImpl) ToMembersProto(source []model.Member) []*v1.Member {
	var pSettlementv1MemberList []*v1.Member
	if source != nil {
		pSettlementv1MemberList = make([]*v1.Member, len(source))
		for i := 0; i < len(source); i++ {
			pSettlementv1MemberList[i] = c.ToMemberProto(source[i])
		}
	}
	return pSettlementv1MemberList
}
func (c *MapperImpl) ToSettlementProto(source model.Settlement) *v1.Settlement {
	var settlementv1Settlement v1.Settlement
	settlementv1Settlement.Id = source.Id
	settlementv1Settlement.Name = source.Name
	settlementv1Settlement.Type = service.TypeToProto(source.Type)
	settlementv1Settlement.Description = source.Description
	settlementv1Settlement.Diplomacy = source.Diplomacy
	settlementv1Settlement.Leader = c.ToMemberProto(source.Leader)
	settlementv1Settlement.Members = c.ToMembersProto(source.Members)
	settlementv1Settlement.Attachments = c.ToAttachmentsProto(source.Attachments)
	settlementv1Settlement.Coordinates = c.ToVector2Proto(source.Coordinates)
	settlementv1Settlement.CreatedAt = goverter.TimeToInt64(source.CreatedAt)
	settlementv1Settlement.UpdatedAt = goverter.TimeToInt64(source.UpdatedAt)
	return &settlementv1Settlement
}
func (c *MapperImpl) ToSettlementProtos(source []model.Settlement) []*v1.Settlement {
	var pSettlementv1SettlementList []*v1.Settlement
	if source != nil {
		pSettlementv1SettlementList = make([]*v1.Settlement, len(source))
		for i := 0; i < len(source); i++ {
			pSettlementv1SettlementList[i] = c.ToSettlementProto(source[i])
		}
	}
	return pSettlementv1SettlementList
}
func (c *MapperImpl) ToVector2Proto(source model.Vector2) *v1.Vector2 {
	var settlementv1Vector2 v1.Vector2
	settlementv1Vector2.X = goverter.IntToInt32(source.X)
	settlementv1Vector2.Y = goverter.IntToInt32(source.Y)
	return &settlementv1Vector2
}
func (c *MapperImpl) ToVector2Protos(source []model.Vector2) []*v1.Vector2 {
	var pSettlementv1Vector2List []*v1.Vector2
	if source != nil {
		pSettlementv1Vector2List = make([]*v1.Vector2, len(source))
		for i := 0; i < len(source); i++ {
			pSettlementv1Vector2List[i] = c.ToVector2Proto(source[i])
		}
	}
	return pSettlementv1Vector2List
}
func (c *MapperImpl) VerifToSettlementProto(source model.SettlementVerification) *v1.Settlement {
	var settlementv1Settlement v1.Settlement
	settlementv1Settlement.Id = source.Id
	settlementv1Settlement.Name = source.Name
	settlementv1Settlement.Type = service.TypeToProto(source.Type)
	settlementv1Settlement.Description = source.Description
	settlementv1Settlement.Diplomacy = source.Diplomacy
	settlementv1Settlement.Leader = c.ToMemberProto(source.Leader)
	settlementv1Settlement.Attachments = c.ToAttachmentsProto(source.Attachments)
	settlementv1Settlement.Coordinates = c.ToVector2Proto(source.Coordinates)
	settlementv1Settlement.CreatedAt = goverter.TimeToInt64(source.CreatedAt)
	settlementv1Settlement.UpdatedAt = goverter.TimeToInt64(source.UpdatedAt)
	return &settlementv1Settlement
}
func (c *MapperImpl) VerifsToSettlementProtos(source []model.SettlementVerification) []*v1.Settlement {
	var pSettlementv1SettlementList []*v1.Settlement
	if source != nil {
		pSettlementv1SettlementList = make([]*v1.Settlement, len(source))
		for i := 0; i < len(source); i++ {
			pSettlementv1SettlementList[i] = c.VerifToSettlementProto(source[i])
		}
	}
	return pSettlementv1SettlementList
}
