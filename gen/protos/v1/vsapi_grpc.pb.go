// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: protos/v1/vsapi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VintageService_GetGameTime_FullMethodName              = "/vintage.v1.VintageService/GetGameTime"
	VintageService_StreamGameTime_FullMethodName           = "/vintage.v1.VintageService/StreamGameTime"
	VintageService_GetOnlinePlayersCount_FullMethodName    = "/vintage.v1.VintageService/GetOnlinePlayersCount"
	VintageService_StreamOnlinePlayersCount_FullMethodName = "/vintage.v1.VintageService/StreamOnlinePlayersCount"
	VintageService_GetOnlinePlayersList_FullMethodName     = "/vintage.v1.VintageService/GetOnlinePlayersList"
	VintageService_StreamOnlinePlayersList_FullMethodName  = "/vintage.v1.VintageService/StreamOnlinePlayersList"
)

// VintageServiceClient is the client API for VintageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Api with a basic in game data
type VintageServiceClient interface {
	// Gets in game date time, and returns it in formatted string
	GetGameTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeResponse, error)
	StreamGameTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TimeResponse], error)
	GetOnlinePlayersCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayersCountResponse, error)
	StreamOnlinePlayersCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayersCountResponse], error)
	GetOnlinePlayersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayersListResponse, error)
	StreamOnlinePlayersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayersListResponse], error)
}

type vintageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVintageServiceClient(cc grpc.ClientConnInterface) VintageServiceClient {
	return &vintageServiceClient{cc}
}

func (c *vintageServiceClient) GetGameTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, VintageService_GetGameTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vintageServiceClient) StreamGameTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TimeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VintageService_ServiceDesc.Streams[0], VintageService_StreamGameTime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, TimeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VintageService_StreamGameTimeClient = grpc.ServerStreamingClient[TimeResponse]

func (c *vintageServiceClient) GetOnlinePlayersCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayersCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayersCountResponse)
	err := c.cc.Invoke(ctx, VintageService_GetOnlinePlayersCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vintageServiceClient) StreamOnlinePlayersCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayersCountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VintageService_ServiceDesc.Streams[1], VintageService_StreamOnlinePlayersCount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, PlayersCountResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VintageService_StreamOnlinePlayersCountClient = grpc.ServerStreamingClient[PlayersCountResponse]

func (c *vintageServiceClient) GetOnlinePlayersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayersListResponse)
	err := c.cc.Invoke(ctx, VintageService_GetOnlinePlayersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vintageServiceClient) StreamOnlinePlayersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayersListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VintageService_ServiceDesc.Streams[2], VintageService_StreamOnlinePlayersList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, PlayersListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VintageService_StreamOnlinePlayersListClient = grpc.ServerStreamingClient[PlayersListResponse]

// VintageServiceServer is the server API for VintageService service.
// All implementations should embed UnimplementedVintageServiceServer
// for forward compatibility.
//
// Api with a basic in game data
type VintageServiceServer interface {
	// Gets in game date time, and returns it in formatted string
	GetGameTime(context.Context, *emptypb.Empty) (*TimeResponse, error)
	StreamGameTime(*emptypb.Empty, grpc.ServerStreamingServer[TimeResponse]) error
	GetOnlinePlayersCount(context.Context, *emptypb.Empty) (*PlayersCountResponse, error)
	StreamOnlinePlayersCount(*emptypb.Empty, grpc.ServerStreamingServer[PlayersCountResponse]) error
	GetOnlinePlayersList(context.Context, *emptypb.Empty) (*PlayersListResponse, error)
	StreamOnlinePlayersList(*emptypb.Empty, grpc.ServerStreamingServer[PlayersListResponse]) error
}

// UnimplementedVintageServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVintageServiceServer struct{}

func (UnimplementedVintageServiceServer) GetGameTime(context.Context, *emptypb.Empty) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTime not implemented")
}
func (UnimplementedVintageServiceServer) StreamGameTime(*emptypb.Empty, grpc.ServerStreamingServer[TimeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGameTime not implemented")
}
func (UnimplementedVintageServiceServer) GetOnlinePlayersCount(context.Context, *emptypb.Empty) (*PlayersCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlinePlayersCount not implemented")
}
func (UnimplementedVintageServiceServer) StreamOnlinePlayersCount(*emptypb.Empty, grpc.ServerStreamingServer[PlayersCountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOnlinePlayersCount not implemented")
}
func (UnimplementedVintageServiceServer) GetOnlinePlayersList(context.Context, *emptypb.Empty) (*PlayersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlinePlayersList not implemented")
}
func (UnimplementedVintageServiceServer) StreamOnlinePlayersList(*emptypb.Empty, grpc.ServerStreamingServer[PlayersListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOnlinePlayersList not implemented")
}
func (UnimplementedVintageServiceServer) testEmbeddedByValue() {}

// UnsafeVintageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VintageServiceServer will
// result in compilation errors.
type UnsafeVintageServiceServer interface {
	mustEmbedUnimplementedVintageServiceServer()
}

func RegisterVintageServiceServer(s grpc.ServiceRegistrar, srv VintageServiceServer) {
	// If the following call pancis, it indicates UnimplementedVintageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VintageService_ServiceDesc, srv)
}

func _VintageService_GetGameTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VintageServiceServer).GetGameTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VintageService_GetGameTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VintageServiceServer).GetGameTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VintageService_StreamGameTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VintageServiceServer).StreamGameTime(m, &grpc.GenericServerStream[emptypb.Empty, TimeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VintageService_StreamGameTimeServer = grpc.ServerStreamingServer[TimeResponse]

func _VintageService_GetOnlinePlayersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VintageServiceServer).GetOnlinePlayersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VintageService_GetOnlinePlayersCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VintageServiceServer).GetOnlinePlayersCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VintageService_StreamOnlinePlayersCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VintageServiceServer).StreamOnlinePlayersCount(m, &grpc.GenericServerStream[emptypb.Empty, PlayersCountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VintageService_StreamOnlinePlayersCountServer = grpc.ServerStreamingServer[PlayersCountResponse]

func _VintageService_GetOnlinePlayersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VintageServiceServer).GetOnlinePlayersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VintageService_GetOnlinePlayersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VintageServiceServer).GetOnlinePlayersList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VintageService_StreamOnlinePlayersList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VintageServiceServer).StreamOnlinePlayersList(m, &grpc.GenericServerStream[emptypb.Empty, PlayersListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VintageService_StreamOnlinePlayersListServer = grpc.ServerStreamingServer[PlayersListResponse]

// VintageService_ServiceDesc is the grpc.ServiceDesc for VintageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VintageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vintage.v1.VintageService",
	HandlerType: (*VintageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameTime",
			Handler:    _VintageService_GetGameTime_Handler,
		},
		{
			MethodName: "GetOnlinePlayersCount",
			Handler:    _VintageService_GetOnlinePlayersCount_Handler,
		},
		{
			MethodName: "GetOnlinePlayersList",
			Handler:    _VintageService_GetOnlinePlayersList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGameTime",
			Handler:       _VintageService_StreamGameTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOnlinePlayersCount",
			Handler:       _VintageService_StreamOnlinePlayersCount_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOnlinePlayersList",
			Handler:       _VintageService_StreamOnlinePlayersList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/v1/vsapi.proto",
}
