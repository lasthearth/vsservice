// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: settlement/v1/settlement.proto

package settlementv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SettlementService_Submit_FullMethodName           = "/settlement.v1.SettlementService/Submit"
	SettlementService_Get_FullMethodName              = "/settlement.v1.SettlementService/Get"
	SettlementService_List_FullMethodName             = "/settlement.v1.SettlementService/List"
	SettlementService_ListPending_FullMethodName      = "/settlement.v1.SettlementService/ListPending"
	SettlementService_Approve_FullMethodName          = "/settlement.v1.SettlementService/Approve"
	SettlementService_Reject_FullMethodName           = "/settlement.v1.SettlementService/Reject"
	SettlementService_RemoveMember_FullMethodName     = "/settlement.v1.SettlementService/RemoveMember"
	SettlementService_GetInvitations_FullMethodName   = "/settlement.v1.SettlementService/GetInvitations"
	SettlementService_InviteMember_FullMethodName     = "/settlement.v1.SettlementService/InviteMember"
	SettlementService_RevokeInvitation_FullMethodName = "/settlement.v1.SettlementService/RevokeInvitation"
)

// SettlementServiceClient is the client API for SettlementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Represents settlement management service
type SettlementServiceClient interface {
	// Submit a new settlement registration request
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	// Get settlement by ID
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List all settlements
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// List pending settlement requests (requires admin privileges)
	ListPending(ctx context.Context, in *ListPendingRequest, opts ...grpc.CallOption) (*ListPendingResponse, error)
	// Approve a settlement request (requires admin privileges)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	// Reject a settlement request (requires admin privileges)
	Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*RejectResponse, error)
	// Remove a member from a settlement (requires admin privileges)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	// Get all invitations to a settlement
	GetInvitations(ctx context.Context, in *GetInvitationsRequest, opts ...grpc.CallOption) (*GetInvitationsResponse, error)
	// Invite a member to a settlement (requires being the settlement leader)
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error)
	// Revoke an invitation to a settlement (requires being the settlement leader)
	RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...grpc.CallOption) (*RevokeInvitationResponse, error)
}

type settlementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettlementServiceClient(cc grpc.ClientConnInterface) SettlementServiceClient {
	return &settlementServiceClient{cc}
}

func (c *settlementServiceClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, SettlementService_Submit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, SettlementService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, SettlementService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) ListPending(ctx context.Context, in *ListPendingRequest, opts ...grpc.CallOption) (*ListPendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPendingResponse)
	err := c.cc.Invoke(ctx, SettlementService_ListPending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, SettlementService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*RejectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectResponse)
	err := c.cc.Invoke(ctx, SettlementService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, SettlementService_RemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) GetInvitations(ctx context.Context, in *GetInvitationsRequest, opts ...grpc.CallOption) (*GetInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationsResponse)
	err := c.cc.Invoke(ctx, SettlementService_GetInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteMemberResponse)
	err := c.cc.Invoke(ctx, SettlementService_InviteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...grpc.CallOption) (*RevokeInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeInvitationResponse)
	err := c.cc.Invoke(ctx, SettlementService_RevokeInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettlementServiceServer is the server API for SettlementService service.
// All implementations should embed UnimplementedSettlementServiceServer
// for forward compatibility.
//
// Represents settlement management service
type SettlementServiceServer interface {
	// Submit a new settlement registration request
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	// Get settlement by ID
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List all settlements
	List(context.Context, *ListRequest) (*ListResponse, error)
	// List pending settlement requests (requires admin privileges)
	ListPending(context.Context, *ListPendingRequest) (*ListPendingResponse, error)
	// Approve a settlement request (requires admin privileges)
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	// Reject a settlement request (requires admin privileges)
	Reject(context.Context, *RejectRequest) (*RejectResponse, error)
	// Remove a member from a settlement (requires admin privileges)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	// Get all invitations to a settlement
	GetInvitations(context.Context, *GetInvitationsRequest) (*GetInvitationsResponse, error)
	// Invite a member to a settlement (requires being the settlement leader)
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	// Revoke an invitation to a settlement (requires being the settlement leader)
	RevokeInvitation(context.Context, *RevokeInvitationRequest) (*RevokeInvitationResponse, error)
}

// UnimplementedSettlementServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSettlementServiceServer struct{}

func (UnimplementedSettlementServiceServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedSettlementServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSettlementServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSettlementServiceServer) ListPending(context.Context, *ListPendingRequest) (*ListPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPending not implemented")
}
func (UnimplementedSettlementServiceServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedSettlementServiceServer) Reject(context.Context, *RejectRequest) (*RejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedSettlementServiceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedSettlementServiceServer) GetInvitations(context.Context, *GetInvitationsRequest) (*GetInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitations not implemented")
}
func (UnimplementedSettlementServiceServer) InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedSettlementServiceServer) RevokeInvitation(context.Context, *RevokeInvitationRequest) (*RevokeInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvitation not implemented")
}
func (UnimplementedSettlementServiceServer) testEmbeddedByValue() {}

// UnsafeSettlementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettlementServiceServer will
// result in compilation errors.
type UnsafeSettlementServiceServer interface {
	mustEmbedUnimplementedSettlementServiceServer()
}

func RegisterSettlementServiceServer(s grpc.ServiceRegistrar, srv SettlementServiceServer) {
	// If the following call pancis, it indicates UnimplementedSettlementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SettlementService_ServiceDesc, srv)
}

func _SettlementService_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_ListPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).ListPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_ListPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).ListPending(ctx, req.(*ListPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_Reject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).Reject(ctx, req.(*RejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_GetInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).GetInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_GetInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).GetInvitations(ctx, req.(*GetInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).RevokeInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_RevokeInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).RevokeInvitation(ctx, req.(*RevokeInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettlementService_ServiceDesc is the grpc.ServiceDesc for SettlementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettlementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settlement.v1.SettlementService",
	HandlerType: (*SettlementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _SettlementService_Submit_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SettlementService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SettlementService_List_Handler,
		},
		{
			MethodName: "ListPending",
			Handler:    _SettlementService_ListPending_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _SettlementService_Approve_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _SettlementService_Reject_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _SettlementService_RemoveMember_Handler,
		},
		{
			MethodName: "GetInvitations",
			Handler:    _SettlementService_GetInvitations_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _SettlementService_InviteMember_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			Handler:    _SettlementService_RevokeInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settlement/v1/settlement.proto",
}
