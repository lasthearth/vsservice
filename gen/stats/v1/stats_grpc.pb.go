// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stats/v1/stats.proto

package statsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatsService_GetPlayerStats_FullMethodName = "/stats.v1.StatsService/GetPlayerStats"
	StatsService_GetOnlineStats_FullMethodName = "/stats.v1.StatsService/GetOnlineStats"
)

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Represents various stats
type StatsServiceClient interface {
	// Returns player stats
	GetPlayerStats(ctx context.Context, in *PlayerStatsRequest, opts ...grpc.CallOption) (*PlayerStatsResponse, error)
	// Returns online stats
	GetOnlineStats(ctx context.Context, in *OnlineStatsRequest, opts ...grpc.CallOption) (*OnlineStatsResponse, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) GetPlayerStats(ctx context.Context, in *PlayerStatsRequest, opts ...grpc.CallOption) (*PlayerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetPlayerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetOnlineStats(ctx context.Context, in *OnlineStatsRequest, opts ...grpc.CallOption) (*OnlineStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnlineStatsResponse)
	err := c.cc.Invoke(ctx, StatsService_GetOnlineStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServiceServer is the server API for StatsService service.
// All implementations should embed UnimplementedStatsServiceServer
// for forward compatibility.
//
// Represents various stats
type StatsServiceServer interface {
	// Returns player stats
	GetPlayerStats(context.Context, *PlayerStatsRequest) (*PlayerStatsResponse, error)
	// Returns online stats
	GetOnlineStats(context.Context, *OnlineStatsRequest) (*OnlineStatsResponse, error)
}

// UnimplementedStatsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatsServiceServer struct{}

func (UnimplementedStatsServiceServer) GetPlayerStats(context.Context, *PlayerStatsRequest) (*PlayerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (UnimplementedStatsServiceServer) GetOnlineStats(context.Context, *OnlineStatsRequest) (*OnlineStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineStats not implemented")
}
func (UnimplementedStatsServiceServer) testEmbeddedByValue() {}

// UnsafeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceServer will
// result in compilation errors.
type UnsafeStatsServiceServer interface {
	mustEmbedUnimplementedStatsServiceServer()
}

func RegisterStatsServiceServer(s grpc.ServiceRegistrar, srv StatsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatsService_ServiceDesc, srv)
}

func _StatsService_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetPlayerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetPlayerStats(ctx, req.(*PlayerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetOnlineStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetOnlineStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_GetOnlineStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetOnlineStats(ctx, req.(*OnlineStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsService_ServiceDesc is the grpc.ServiceDesc for StatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.v1.StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerStats",
			Handler:    _StatsService_GetPlayerStats_Handler,
		},
		{
			MethodName: "GetOnlineStats",
			Handler:    _StatsService_GetOnlineStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats/v1/stats.proto",
}
