// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: rules/v1/rules.proto

package rulesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuleService_GetRandomQuestions_FullMethodName       = "/rules.v1.RuleService/GetRandomQuestions"
	RuleService_CreateQuestion_FullMethodName           = "/rules.v1.RuleService/CreateQuestion"
	RuleService_ListVerificationRequests_FullMethodName = "/rules.v1.RuleService/ListVerificationRequests"
	RuleService_VerifyRequest_FullMethodName            = "/rules.v1.RuleService/VerifyRequest"
)

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Represents rules
type RuleServiceClient interface {
	// Returns random questions about rules
	GetRandomQuestions(ctx context.Context, in *GetRandomQuestionsRequest, opts ...grpc.CallOption) (*GetRandomQuestionsResponse, error)
	// Creates a new question about rules
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	// Returns verification requests from users
	ListVerificationRequests(ctx context.Context, in *ListVerificationRequestsRequest, opts ...grpc.CallOption) (*ListVerificationRequestsResponse, error)
	// Verifies user answers to questions about rules
	VerifyRequest(ctx context.Context, in *VerifyRequestRequest, opts ...grpc.CallOption) (*VerifyRequestResponse, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) GetRandomQuestions(ctx context.Context, in *GetRandomQuestionsRequest, opts ...grpc.CallOption) (*GetRandomQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomQuestionsResponse)
	err := c.cc.Invoke(ctx, RuleService_GetRandomQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, RuleService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListVerificationRequests(ctx context.Context, in *ListVerificationRequestsRequest, opts ...grpc.CallOption) (*ListVerificationRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVerificationRequestsResponse)
	err := c.cc.Invoke(ctx, RuleService_ListVerificationRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) VerifyRequest(ctx context.Context, in *VerifyRequestRequest, opts ...grpc.CallOption) (*VerifyRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyRequestResponse)
	err := c.cc.Invoke(ctx, RuleService_VerifyRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServiceServer is the server API for RuleService service.
// All implementations should embed UnimplementedRuleServiceServer
// for forward compatibility.
//
// Represents rules
type RuleServiceServer interface {
	// Returns random questions about rules
	GetRandomQuestions(context.Context, *GetRandomQuestionsRequest) (*GetRandomQuestionsResponse, error)
	// Creates a new question about rules
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	// Returns verification requests from users
	ListVerificationRequests(context.Context, *ListVerificationRequestsRequest) (*ListVerificationRequestsResponse, error)
	// Verifies user answers to questions about rules
	VerifyRequest(context.Context, *VerifyRequestRequest) (*VerifyRequestResponse, error)
}

// UnimplementedRuleServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleServiceServer struct{}

func (UnimplementedRuleServiceServer) GetRandomQuestions(context.Context, *GetRandomQuestionsRequest) (*GetRandomQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomQuestions not implemented")
}
func (UnimplementedRuleServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedRuleServiceServer) ListVerificationRequests(context.Context, *ListVerificationRequestsRequest) (*ListVerificationRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVerificationRequests not implemented")
}
func (UnimplementedRuleServiceServer) VerifyRequest(context.Context, *VerifyRequestRequest) (*VerifyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRequest not implemented")
}
func (UnimplementedRuleServiceServer) testEmbeddedByValue() {}

// UnsafeRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServiceServer will
// result in compilation errors.
type UnsafeRuleServiceServer interface {
	mustEmbedUnimplementedRuleServiceServer()
}

func RegisterRuleServiceServer(s grpc.ServiceRegistrar, srv RuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedRuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuleService_ServiceDesc, srv)
}

func _RuleService_GetRandomQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRandomQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetRandomQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRandomQuestions(ctx, req.(*GetRandomQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListVerificationRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVerificationRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListVerificationRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ListVerificationRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListVerificationRequests(ctx, req.(*ListVerificationRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_VerifyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).VerifyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_VerifyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).VerifyRequest(ctx, req.(*VerifyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleService_ServiceDesc is the grpc.ServiceDesc for RuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rules.v1.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomQuestions",
			Handler:    _RuleService_GetRandomQuestions_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _RuleService_CreateQuestion_Handler,
		},
		{
			MethodName: "ListVerificationRequests",
			Handler:    _RuleService_ListVerificationRequests_Handler,
		},
		{
			MethodName: "VerifyRequest",
			Handler:    _RuleService_VerifyRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rules/v1/rules.proto",
}
